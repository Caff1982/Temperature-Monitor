from PyQt5 import QtCore, QtGui, QtWidgets
from canvas import DynamicMplCanvas


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(567, 500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(10, 10, 341, 181))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tableView.setFont(font)
        self.tableView.setObjectName("tableView")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(350, 10, 201, 181))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        self.logfileButton = QtWidgets.QPushButton("logfileButton", self.frame)
        self.logfileButton.setCheckable(True)
        self.gridLayout.addWidget(self.logfileButton, 6, 0, 1, 1)
        self.refreshRateButton = QtWidgets.QPushButton("refreshRateButton", self.frame)
        self.gridLayout.addWidget(self.refreshRateButton, 4, 0, 1, 1)
        self.resetMinMaxButton = QtWidgets.QPushButton("resetMinMaxButton", self.frame)
        self.gridLayout.addWidget(self.resetMinMaxButton, 5, 0, 1, 1)
        self.refreshLabel = QtWidgets.QLabel("refreshLabel", self.frame)
        self.refreshLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.gridLayout.addWidget(self.refreshLabel, 2, 0, 1, 1)
        self.nameLabel = QtWidgets.QLabel("nameLabel", self.frame)
        self.gridLayout.addWidget(self.nameLabel, 0, 0, 1, 1)
        self.tempLabel = QtWidgets.QLabel("tempLabel", self.frame)
        self.tempLabel.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.gridLayout.addWidget(self.tempLabel, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 567, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu("menuFile", self.menubar)
        self.menuSettings = QtWidgets.QMenu("menuSettings", self.menubar)
        self.menuHelp = QtWidgets.QMenu("menuHelp", self.menubar)
        self.menuDevices = QtWidgets.QMenu("menuDevices", self.menubar)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionClose = QtWidgets.QAction("actionClose", MainWindow)
        self.actionOpen_New_Window = QtWidgets.QAction("actionOpen_New_Window", MainWindow)
        self.actionReset_Min_Max = QtWidgets.QAction("actionReset_Min_Max", MainWindow)
        self.menuChangePlotDevice = QtWidgets.QMenu("menuChangePlotDevice", MainWindow)
        self.device_group = QtWidgets.QActionGroup(self.menuChangePlotDevice)
        self.actionSet_Refresh_Rate = QtWidgets.QAction("actionSet_Refresh_Rate", MainWindow)
        self.actionView_Available_devices = QtWidgets.QAction("actionView_Available_devices", MainWindow)
        self.actionAbout = QtWidgets.QAction("actionAbout", MainWindow)
        self.actionCreateCSV_log_file = QtWidgets.QAction("actionCreateCSV_log_file", MainWindow)
        self.menuFile.addAction(self.actionOpen_New_Window)
        self.menuFile.addAction(self.actionClose)
        self.menuSettings.addAction(self.actionReset_Min_Max)
        self.menuSettings.addAction(self.actionSet_Refresh_Rate)
        self.menuSettings.addAction(self.actionCreateCSV_log_file)
        self.menuSettings.addMenu(self.menuChangePlotDevice)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuDevices.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        # Initialize canvas to plot temperatures
        self.canvas = DynamicMplCanvas(self)
        self.canvas.move(10, 240)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Temperature Monitor"))
        self.logfileButton.setText(_translate("MainWindow", "Create log file"))
        self.refreshRateButton.setText(_translate("MainWindow", "Change Refresh Rate"))
        self.resetMinMaxButton.setText(_translate("MainWindow", "Reset Min/Max"))
        self.menuChangePlotDevice.setTitle(_translate("MainWindow", "Set Device to Plot"))
        self.refreshLabel.setText(_translate("MainWindow", "Refresh Rate: 10s"))
        self.nameLabel.setText(_translate("MainWindow", "Temperature Monitor v1.1"))
        self.tempLabel.setText(_translate("MainWindow", "Temp. in Celsius"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuSettings.setTitle(_translate("MainWindow", "Tools"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuDevices.setTitle(_translate("MainWindow", "Devices"))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionClose.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionOpen_New_Window.setText(_translate("MainWindow", "Open New Window"))
        self.actionReset_Min_Max.setText(_translate("MainWindow", "Reset Min/Max"))
        self.actionSet_Refresh_Rate.setText(_translate("MainWindow", "Set Refresh Rate"))
        self.actionView_Available_devices.setText(_translate("MainWindow", "View Available devices"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionAbout.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.actionCreateCSV_log_file.setText(_translate("MainWindow", "CreateCSV log file"))
